openapi: 3.0.3
info:
  title: E-Commerce API
  description: "API specification for E-Commerce platform with user management, product catalog, order processing, and customer support"
  contact:
    name: API Support
    email: support@ecommerce.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/vinh-928/E-Commerce/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.ecommerce.com/v1
  description: Production server
- url: https://staging-api.ecommerce.com/v1
  description: Staging server
- url: http://localhost:3000/v1
  description: Development server
security:
- bearerAuth: []
tags:
- name: Authentication
  description: User authentication operations
- name: Users
  description: User management operations
- name: Categories
  description: Product category operations
- name: Products
  description: Product management operations
- name: Coupons
  description: Discount coupon management operations
- name: Addresses
  description: User address management
- name: Cart
  description: Shopping cart operations
- name: Orders
  description: Order management operations
- name: Payments
  description: Payment processing operations
- name: Shipments
  description: Shipping and delivery operations
- name: Reviews
  description: Product review operations
- name: Support
  description: Customer support ticket operations
- name: Chat
  description: Chat messaging operations
paths:
  /auth/register:
    post:
      tags:
      - Authentication
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_register_body'
        required: true
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "409":
          description: Email already exists
      security: []
  /auth/login:
    post:
      tags:
      - Authentication
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_login_body'
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
      security: []
  /auth/logout:
    post:
      tags:
      - Authentication
      summary: User logout
      responses:
        "200":
          description: Logout successful
        "401":
          $ref: '#/components/responses/Unauthorized'
  /users:
    get:
      tags:
      - Users
      summary: Get all users (admin only)
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      - name: role
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/UserRole'
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      security:
      - bearerAuth: []
  /users/{id}:
    get:
      tags:
      - Users
      summary: Get user by ID
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      tags:
      - Users
      summary: Update user
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_id_body'
        required: true
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
      - Users
      summary: Delete user (admin only)
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: User deleted successfully
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
  /categories:
    get:
      tags:
      - Categories
      summary: Get all categories
      parameters:
      - name: parent_id
        in: query
        description: Filter by parent category
        required: false
        schema:
          type: integer
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      security: []
    post:
      tags:
      - Categories
      summary: Create new category (admin/staff only)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_body'
        required: true
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
  /categories/{id}:
    get:
      tags:
      - Categories
      summary: Get category by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "404":
          $ref: '#/components/responses/NotFound'
      security: []
    put:
      tags:
      - Categories
      summary: Update category (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_id_body'
        required: true
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
      - Categories
      summary: Delete category (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Category deleted successfully
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
  /products:
    get:
      tags:
      - Products
      summary: Get all products
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      - name: category_id
        in: query
        description: Filter by category
        required: false
        schema:
          type: integer
      - name: min_price
        in: query
        required: false
        schema:
          type: number
          format: decimal
      - name: max_price
        in: query
        required: false
        schema:
          type: number
          format: decimal
      - name: search
        in: query
        description: Search in product name and description
        required: false
        schema:
          type: string
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
      security: []
    post:
      tags:
      - Products
      summary: Create new product (admin/staff only)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/products_body'
        required: true
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
  /products/{id}:
    get:
      tags:
      - Products
      summary: Get product by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
        "404":
          $ref: '#/components/responses/NotFound'
      security: []
    put:
      tags:
      - Products
      summary: Update product (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/products_id_body'
        required: true
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
      - Products
      summary: Delete product (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Product deleted successfully
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
  /coupons:
    get:
      tags:
      - Coupons
      summary: Get all coupons (admin/staff only)
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      - name: discount_type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DiscountType'
      - name: active
        in: query
        description: Filter active coupons (based on start_date and end_date)
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: List of coupons
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponListResponse'
        "403":
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
      - Coupons
      summary: Create new coupon (admin/staff only)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coupons_body'
        required: true
      responses:
        "201":
          description: Coupon created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          description: Coupon code already exists
  /coupons/{id}:
    get:
      tags:
      - Coupons
      summary: Get coupon by ID (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Coupon details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      tags:
      - Coupons
      summary: Update coupon (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coupons_id_body'
        required: true
      responses:
        "200":
          description: Coupon updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          description: Coupon code already exists
    delete:
      tags:
      - Coupons
      summary: Delete coupon (admin only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Coupon deleted successfully
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
  /coupons/validate:
    post:
      tags:
      - Coupons
      summary: Validate coupon code
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coupons_validate_body'
        required: true
      responses:
        "200":
          description: Coupon is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Coupon is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: Coupon not found
  /addresses:
    get:
      tags:
      - Addresses
      summary: Get user addresses
      responses:
        "200":
          description: List of user addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
    post:
      tags:
      - Addresses
      summary: Create new address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
        required: true
      responses:
        "201":
          description: Address created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "400":
          $ref: '#/components/responses/BadRequest'
  /addresses/{id}:
    get:
      tags:
      - Addresses
      summary: Get address by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Address details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      tags:
      - Addresses
      summary: Update address
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
        required: true
      responses:
        "200":
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
      - Addresses
      summary: Delete address
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Address deleted successfully
        "404":
          $ref: '#/components/responses/NotFound'
  /cart:
    get:
      tags:
      - Cart
      summary: Get user cart
      responses:
        "200":
          description: User cart details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /cart/items:
    post:
      tags:
      - Cart
      summary: Add item to cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cart_items_body'
        required: true
      responses:
        "201":
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        "400":
          $ref: '#/components/responses/BadRequest'
  /cart/items/{id}:
    put:
      tags:
      - Cart
      summary: Update cart item quantity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/items_id_body'
        required: true
      responses:
        "200":
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
      - Cart
      summary: Remove item from cart
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Item removed from cart
        "404":
          $ref: '#/components/responses/NotFound'
  /orders:
    get:
      tags:
      - Orders
      summary: Get user orders
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/OrderStatus'
      responses:
        "200":
          description: List of user orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
    post:
      tags:
      - Orders
      summary: Create new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orders_body'
        required: true
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          $ref: '#/components/responses/BadRequest'
  /orders/{id}:
    get:
      tags:
      - Orders
      summary: Get order by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      tags:
      - Orders
      summary: Update order status (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orders_id_body'
        required: true
      responses:
        "200":
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
  /payments:
    post:
      tags:
      - Payments
      summary: Create payment for order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payments_body'
        required: true
      responses:
        "201":
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        "400":
          $ref: '#/components/responses/BadRequest'
  /payments/{id}:
    get:
      tags:
      - Payments
      summary: Get payment by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      tags:
      - Payments
      summary: Update payment status
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payments_id_body'
        required: true
      responses:
        "200":
          description: Payment status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
  /shipments:
    get:
      tags:
      - Shipments
      summary: Get shipments (admin/staff only)
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ShipmentStatus'
      responses:
        "200":
          description: List of shipments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentListResponse'
        "403":
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
      - Shipments
      summary: Create shipment (admin/staff only)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shipments_body'
        required: true
      responses:
        "201":
          description: Shipment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
  /shipments/{id}:
    get:
      tags:
      - Shipments
      summary: Get shipment by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Shipment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      tags:
      - Shipments
      summary: Update shipment (admin/staff only)
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shipments_id_body'
        required: true
      responses:
        "200":
          description: Shipment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
  /products/{productId}/reviews:
    get:
      tags:
      - Reviews
      summary: Get product reviews
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      - name: rating
        in: query
        required: false
        schema:
          maximum: 5
          minimum: 1
          type: integer
      responses:
        "200":
          description: List of product reviews
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewListResponse'
      security: []
    post:
      tags:
      - Reviews
      summary: Create product review
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productId_reviews_body'
        required: true
      responses:
        "201":
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        "400":
          $ref: '#/components/responses/BadRequest'
        "409":
          description: Review already exists for this product
  /reviews/{id}:
    put:
      tags:
      - Reviews
      summary: Update review
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reviews_id_body'
        required: true
      responses:
        "200":
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
      - Reviews
      summary: Delete review
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: Review deleted successfully
        "404":
          $ref: '#/components/responses/NotFound'
  /tickets:
    get:
      tags:
      - Support
      summary: Get user tickets
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TicketStatus'
      responses:
        "200":
          description: List of user tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketListResponse'
    post:
      tags:
      - Support
      summary: Create support ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tickets_body'
        required: true
      responses:
        "201":
          description: Ticket created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        "400":
          $ref: '#/components/responses/BadRequest'
  /tickets/{id}:
    get:
      tags:
      - Support
      summary: Get ticket by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Ticket details with messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketDetail'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      tags:
      - Support
      summary: Update ticket status
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tickets_id_body'
        required: true
      responses:
        "200":
          description: Ticket status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
  /tickets/{id}/messages:
    post:
      tags:
      - Support
      summary: Add message to ticket
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id_messages_body'
        required: true
      responses:
        "201":
          description: Message added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMessage'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
  /chat/messages:
    get:
      tags:
      - Chat
      summary: Get chat messages
      parameters:
      - name: receiver_id
        in: query
        required: true
        schema:
          type: integer
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 10
      responses:
        "200":
          description: List of chat messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageListResponse'
    post:
      tags:
      - Chat
      summary: Send chat message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chat_messages_body'
        required: true
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        "400":
          $ref: '#/components/responses/BadRequest'
components:
  schemas:
    UserRole:
      type: string
      default: customer
      enum:
      - admin
      - staff
      - customer
    DiscountType:
      type: string
      example: percentage
      enum:
      - percentage
      - fixed_amount
    OrderStatus:
      type: string
      default: pending
      enum:
      - pending
      - processing
      - completed
      - cancelled
    PaymentMethod:
      type: string
      enum:
      - credit_card
      - paypal
      - bank_transfer
      - cash_on_delivery
    PaymentStatus:
      type: string
      default: pending
      enum:
      - pending
      - paid
      - failed
      - refunded
    ShipmentStatus:
      type: string
      default: preparing
      enum:
      - preparing
      - shipped
      - in_transit
      - delivered
      - returned
    TicketStatus:
      type: string
      default: open
      enum:
      - open
      - resolved
    User:
      required:
      - email
      - id
      - name
      - role
      type: object
      properties:
        id:
          type: integer
        name:
          maxLength: 100
          type: string
        email:
          maxLength: 150
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
    Category:
      required:
      - id
      - name
      - slug
      type: object
      properties:
        id:
          type: integer
        name:
          maxLength: 100
          type: string
        slug:
          maxLength: 120
          type: string
        parent_id:
          type: integer
          nullable: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Product:
      required:
      - id
      - name
      - price
      - stock
      type: object
      properties:
        id:
          type: integer
        name:
          maxLength: 150
          type: string
        price:
          minimum: 0
          type: number
          format: decimal
        stock:
          minimum: 0
          type: integer
        description:
          type: string
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    ProductDetail:
      allOf:
      - $ref: '#/components/schemas/Product'
      - type: object
        properties:
          reviews:
            type: array
            items:
              $ref: '#/components/schemas/Review'
          average_rating:
            maximum: 5
            minimum: 0
            type: number
            format: float
          review_count:
            minimum: 0
            type: integer
    Coupon:
      required:
      - code
      - discount_type
      - end_date
      - id
      - minimum_order_value
      - start_date
      - value
      type: object
      properties:
        id:
          type: integer
        code:
          maxLength: 50
          type: string
          example: SUMMER2025
        description:
          type: string
          nullable: true
        discount_type:
          $ref: '#/components/schemas/DiscountType'
        value:
          minimum: 0
          type: number
          description: "For percentage: 10 = 10%, for fixed_amount: 50000 = 50,000 VND"
          format: decimal
        minimum_order_value:
          minimum: 0
          type: number
          format: decimal
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        usage_limit:
          minimum: 1
          type: integer
          description: Maximum number of times this coupon can be used (null = unlimited)
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Address:
      required:
      - address_line
      - city
      - full_name
      - id
      - is_default
      - phone
      - user_id
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        full_name:
          maxLength: 100
          type: string
        phone:
          maxLength: 20
          type: string
        address_line:
          maxLength: 255
          type: string
        city:
          maxLength: 100
          type: string
        is_default:
          type: boolean
          default: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AddressInput:
      required:
      - address_line
      - city
      - full_name
      - phone
      type: object
      properties:
        full_name:
          maxLength: 100
          type: string
        phone:
          maxLength: 20
          type: string
        address_line:
          maxLength: 255
          type: string
        city:
          maxLength: 100
          type: string
        is_default:
          type: boolean
          default: false
    CartItem:
      required:
      - cart_id
      - id
      - price
      - product_id
      - quantity
      type: object
      properties:
        id:
          type: integer
        cart_id:
          type: integer
        product_id:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          minimum: 1
          type: integer
        price:
          type: number
          format: decimal
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Cart:
      required:
      - id
      - items
      - total_amount
      - user_id
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total_amount:
          type: number
          format: decimal
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrderItem:
      required:
      - id
      - order_id
      - price
      - product_id
      - quantity
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          minimum: 1
          type: integer
        price:
          type: number
          format: decimal
        created_at:
          type: string
          format: date-time
    Order:
      required:
      - discount_amount
      - id
      - status
      - total_amount
      - user_id
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        shipping_address_id:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/OrderStatus'
        total_amount:
          type: number
          format: decimal
        coupon_id:
          type: integer
          nullable: true
        discount_amount:
          type: number
          format: decimal
    OrderDetail:
      allOf:
      - $ref: '#/components/schemas/Order'
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: '#/components/schemas/OrderItem'
          shipping_address:
            $ref: '#/components/schemas/Address'
          coupon:
            $ref: '#/components/schemas/Coupon'
          payments:
            type: array
            items:
              $ref: '#/components/schemas/Payment'
          shipments:
            type: array
            items:
              $ref: '#/components/schemas/Shipment'
    Payment:
      required:
      - amount
      - id
      - method
      - order_id
      - status
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: integer
        amount:
          type: number
          format: decimal
        method:
          $ref: '#/components/schemas/PaymentMethod'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        transaction_id:
          maxLength: 100
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Shipment:
      required:
      - courier
      - id
      - order_id
      - status
      - tracking_number
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: integer
        courier:
          maxLength: 100
          type: string
        tracking_number:
          maxLength: 100
          type: string
        status:
          $ref: '#/components/schemas/ShipmentStatus'
        shipped_at:
          type: string
          format: date-time
          nullable: true
        delivered_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Review:
      required:
      - id
      - product_id
      - rating
      - user_id
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        user_id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        order_id:
          type: integer
          nullable: true
        rating:
          maximum: 5
          minimum: 1
          type: integer
          default: 1
        comment:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
    Ticket:
      required:
      - id
      - status
      - subject
      - user_id
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        subject:
          maxLength: 255
          type: string
        status:
          $ref: '#/components/schemas/TicketStatus'
        created_at:
          type: string
          format: date-time
    TicketMessage:
      required:
      - id
      - message
      - sender_id
      - ticket_id
      type: object
      properties:
        id:
          type: integer
        ticket_id:
          type: integer
        sender_id:
          type: integer
        sender:
          $ref: '#/components/schemas/User'
        message:
          type: string
        created_at:
          type: string
          format: date-time
    TicketDetail:
      allOf:
      - $ref: '#/components/schemas/Ticket'
      - type: object
        properties:
          messages:
            type: array
            items:
              $ref: '#/components/schemas/TicketMessage'
    ChatMessage:
      required:
      - id
      - message
      - receiver_id
      - sender_id
      type: object
      properties:
        id:
          type: integer
        sender_id:
          type: integer
        sender:
          $ref: '#/components/schemas/User'
        receiver_id:
          type: integer
        receiver:
          $ref: '#/components/schemas/User'
        message:
          type: string
        created_at:
          type: string
          format: date-time
    AuthResponse:
      required:
      - expires_at
      - token
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        expires_at:
          type: string
          format: date-time
    UserListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ProductListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/Pagination'
    CouponListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Coupon'
        pagination:
          $ref: '#/components/schemas/Pagination'
    OrderListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ShipmentListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Shipment'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ReviewListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        pagination:
          $ref: '#/components/schemas/Pagination'
    TicketListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ChatMessageListResponse:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      required:
      - current_page
      - last_page
      - per_page
      - total
      type: object
      properties:
        current_page:
          minimum: 1
          type: integer
        per_page:
          minimum: 1
          type: integer
        total:
          minimum: 0
          type: integer
        last_page:
          minimum: 1
          type: integer
        from:
          minimum: 0
          type: integer
          nullable: true
        to:
          minimum: 0
          type: integer
          nullable: true
    Error:
      required:
      - error
      - message
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
    auth_register_body:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          maxLength: 100
          type: string
        email:
          maxLength: 150
          type: string
          format: email
        password:
          maxLength: 255
          minLength: 8
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
    auth_login_body:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    users_id_body:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
        email:
          maxLength: 150
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
    categories_body:
      required:
      - name
      - slug
      type: object
      properties:
        name:
          maxLength: 100
          type: string
        slug:
          maxLength: 120
          type: string
        parent_id:
          type: integer
          nullable: true
    categories_id_body:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
        slug:
          maxLength: 120
          type: string
        parent_id:
          type: integer
          nullable: true
    products_body:
      required:
      - name
      - price
      type: object
      properties:
        name:
          maxLength: 150
          type: string
        price:
          minimum: 0
          type: number
          format: decimal
        stock:
          minimum: 0
          type: integer
          default: 0
        description:
          type: string
          nullable: true
        category_ids:
          type: array
          items:
            type: integer
    products_id_body:
      type: object
      properties:
        name:
          maxLength: 150
          type: string
        price:
          minimum: 0
          type: number
          format: decimal
        stock:
          minimum: 0
          type: integer
        description:
          type: string
          nullable: true
        category_ids:
          type: array
          items:
            type: integer
    coupons_body:
      required:
      - code
      - discount_type
      - end_date
      - start_date
      - value
      type: object
      properties:
        code:
          maxLength: 50
          type: string
          example: SUMMER2025
        description:
          type: string
          nullable: true
        discount_type:
          $ref: '#/components/schemas/DiscountType'
        value:
          minimum: 0
          type: number
          description: "For percentage: 10 = 10%, for fixed_amount: 50000 = 50,000 VND"
          format: decimal
          example: 10
        minimum_order_value:
          minimum: 0
          type: number
          format: decimal
          default: 0
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        usage_limit:
          minimum: 1
          type: integer
          description: Maximum number of times this coupon can be used (null = unlimited)
          nullable: true
    coupons_id_body:
      type: object
      properties:
        code:
          maxLength: 50
          type: string
        description:
          type: string
          nullable: true
        discount_type:
          $ref: '#/components/schemas/DiscountType'
        value:
          minimum: 0
          type: number
          format: decimal
        minimum_order_value:
          minimum: 0
          type: number
          format: decimal
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        usage_limit:
          minimum: 1
          type: integer
          nullable: true
    coupons_validate_body:
      required:
      - code
      - order_value
      type: object
      properties:
        code:
          maxLength: 50
          type: string
          example: SUMMER2025
        order_value:
          minimum: 0
          type: number
          description: Total order value to validate against minimum_order_value
          format: decimal
    inline_response_200:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        coupon:
          $ref: '#/components/schemas/Coupon'
        discount_amount:
          type: number
          description: Calculated discount amount for this order
          format: decimal
    inline_response_400:
      type: object
      properties:
        valid:
          type: boolean
          example: false
        message:
          type: string
          example: Coupon code not found or expired
    cart_items_body:
      required:
      - product_id
      - quantity
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          minimum: 1
          type: integer
    items_id_body:
      required:
      - quantity
      type: object
      properties:
        quantity:
          minimum: 1
          type: integer
    orders_body:
      type: object
      properties:
        shipping_address_id:
          type: integer
          nullable: true
        coupon_code:
          maxLength: 50
          type: string
          description: Coupon code to apply discount
          nullable: true
    orders_id_body:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
    payments_body:
      required:
      - amount
      - method
      - order_id
      type: object
      properties:
        order_id:
          type: integer
        amount:
          minimum: 0
          type: number
          format: decimal
        method:
          $ref: '#/components/schemas/PaymentMethod'
        transaction_id:
          maxLength: 100
          type: string
          nullable: true
    payments_id_body:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PaymentStatus'
        transaction_id:
          maxLength: 100
          type: string
    shipments_body:
      required:
      - courier
      - order_id
      - tracking_number
      type: object
      properties:
        order_id:
          type: integer
        courier:
          maxLength: 100
          type: string
        tracking_number:
          maxLength: 100
          type: string
    shipments_id_body:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ShipmentStatus'
        shipped_at:
          type: string
          format: date-time
          nullable: true
        delivered_at:
          type: string
          format: date-time
          nullable: true
    productId_reviews_body:
      required:
      - rating
      type: object
      properties:
        rating:
          maximum: 5
          minimum: 1
          type: integer
          default: 1
        comment:
          type: string
          nullable: true
        order_id:
          type: integer
          nullable: true
    reviews_id_body:
      type: object
      properties:
        rating:
          maximum: 5
          minimum: 1
          type: integer
        comment:
          type: string
          nullable: true
    tickets_body:
      required:
      - subject
      type: object
      properties:
        subject:
          maxLength: 255
          type: string
    tickets_id_body:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TicketStatus'
    id_messages_body:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    chat_messages_body:
      required:
      - message
      - receiver_id
      type: object
      properties:
        receiver_id:
          type: integer
        message:
          type: string
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    Page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        minimum: 1
        type: integer
        default: 1
    Limit:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        maximum: 100
        minimum: 1
        type: integer
        default: 10
    UserId:
      name: id
      in: path
      description: User ID
      required: true
      schema:
        type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
